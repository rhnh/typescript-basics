{"version":3,"sources":["app/utils.ts","index.ts"],"names":[],"mappings":"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","file":"src.4697f6b8.js","sourceRoot":"../src","sourcesContent":["/**\n * π/4 = 1/1 - 1/3 + 1/5 - 1 /7 + 1/9 ± ...\n */\nexport function LeibnizSeries(value: number): number {\n  let sum: number = 0;\n\n  for (let i: number = 1; i < 2 * value; i++) {\n    if (oddNumber(i)) {\n      sum *= -1;\n      sum += 1 / i;\n    }\n  }\n  if (sum < 0) {\n    sum *= -1;\n  }\n  return (sum *= 4);\n}\n\n/**\n *  e^x = 1 + x + x^2/2! + x^3/3! + x^4/4! + x^5/5! +... + x^n/n!\n * @param x number\n * @param n number\n */\nexport function exponentialSeries(x: number, n: number): number {\n  let result: number = 1;\n  let e: number = 1;\n  for (let i: number = 1; i <= n; i++) {\n    result *= x / i; // the numerator constant (x) and the  denominator variable (i) will be multiplied\n    e += result;\n  }\n  return e;\n}\n\n/**\n * 1+3+5....\n */\nexport function sumOfOddNumbers(value: number): number {\n  let sum: number = 0;\n  for (let i: number = 0; i <= value; i++) {\n    if (oddNumber(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n/**\n * O(sqrt(n))\n * @param value number\n */\nexport function isPrime(value: number): boolean {\n  if (value <= 1) return false;\n  if (value <= 3) return true; // 2 or 3 => true\n\n  if (value % 2 === 0 || value % 3 === 0) {\n    // can be divided by 2 or 3 => false\n    return false;\n  }\n  for (let i = 5; i * i <= value; i = i + 6) {\n    //value >= 25 ?\n    if (value % i === 0 || value % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * 1 + 1/2+ 1/3 + 1/4 ...\n */\nexport function harmonicSeries(value: number): number {\n  let sum: number = 0;\n  for (let i: number = 1; i <= value; i++) {\n    sum += 1 / i;\n  }\n  return sum;\n}\n\n/**\n *\n * @param value number\n */\nexport function primeFactors(value: number): string {\n  if (isPrime(value)) {\n    return `${value} is a prime number`;\n  }\n  let original: number = value;\n  let strResult: string = \"\";\n  while (value % 2 === 0) {\n    strResult += \" * \" + 2;\n    value /= 2;\n  }\n  //since value is odd or prime by now\n  for (let i = 3; i * i <= value; i = i + 2) {\n    while (value % i === 0) {\n      strResult += \" * \" + i;\n      value /= i;\n    }\n  }\n  strResult = (value !== 1 ? value + \"\" : \"\") + strResult + \" = \" + original;\n  if (\n    strResult.charAt(0) === \"\" ||\n    strResult.charAt(0) === \" \" ||\n    strResult.charAt(0) === \"*\"\n  )\n    strResult = strResult.substr(2);\n\n  return strResult;\n}\n\nexport function numberOfHandShake(n: number): number {\n  let sum: number = 0;\n  for (let i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n//utils\nfunction oddNumber(value: number): boolean {\n  if (!evenNumber(value)) {\n    return true;\n  }\n  return false;\n}\n\nfunction evenNumber(value: number): boolean {\n  if (value % 2 === 0) {\n    return true;\n  }\n  return false;\n}\n","import * as utils from \"./app/utils\";\n\nconst result = document.getElementById(\"result\");\nconst harmonicSeriesBtn = document.getElementById(\"harmonic-series\");\nconst leibnizSeriesBtn = document.getElementById(\"leibniz-series\");\nconst sumOfOddsBtn = document.getElementById(\"sum-of-odds\");\nconst inputBox = <HTMLInputElement>document.getElementById(\"input-value\");\nconst isPrime = document.getElementById(\"is-prime\");\nconst modal = document.getElementById(\"modal\");\nconst primeFactor = document.getElementById(\"prime-factor\");\nharmonicSeriesBtn.addEventListener(\"click\", () => {\n  modal.style.display = \"block;\";\n});\nsumOfOddsBtn.addEventListener(\"click\", () => {\n  const value = inputBox.value;\n  let res: number = utils.sumOfOddNumbers(+value);\n  result.innerHTML = res.toString();\n});\nleibnizSeriesBtn.addEventListener(\"click\", () => {\n  const value = inputBox.value;\n  let res: number = utils.LeibnizSeries(+value);\n  result.innerHTML = res.toString();\n});\nisPrime.addEventListener(\"click\", () => {\n  const value = inputBox.value;\n  let res: boolean = utils.isPrime(+value);\n  result.innerHTML = res.toString();\n});\n\nprimeFactor.addEventListener(\"click\", () => {\n  const value = inputBox.value;\n  let res: string = utils.primeFactors(+value);\n  result.innerHTML = res;\n});\n"]}